<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心不了情</title>
  
  <subtitle>自己没能力就说没能力，还大环境，怎么你到哪哪都大环境不好，你是破坏大环境的人啊?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangzhicto.com/"/>
  <updated>2019-05-12T08:07:13.000Z</updated>
  <id>http://wangzhicto.com/</id>
  
  <author>
    <name>Wang Zhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>完整的HTTP请求过程</title>
    <link href="http://wangzhicto.com/2019/05/12/http%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://wangzhicto.com/2019/05/12/http全过程/</id>
    <published>2019-05-12T08:07:13.000Z</published>
    <updated>2019-05-12T08:07:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP执行流程拓展"><a href="#HTTP执行流程拓展" class="headerlink" title="HTTP执行流程拓展"></a>HTTP执行流程拓展</h1><p>&nbsp;&nbsp;本章博客是介绍web请求会话过程中网络执行的情况，不涉及服务器内部执行流程。话不多说，一起学习吧！<br><br>&nbsp;&nbsp;<strong>第一篇博客中提到当在浏览器的地址栏中输入<code>www.wangzhicto.com</code>按下回车键的那一刻，展现在眼前的页面就是通过HTTP从服务器带回来的，其实这一刻，不仅仅是发送HTTP请求这么简单，先看一下整个过程概览，然后一一详解……</strong><br></p><h2 id="过程概览"><a href="#过程概览" class="headerlink" title="过程概览"></a>过程概览</h2><ol><li>域名解析    (目的：得到服务器IP地址，定位地址)</li><li>TCP握手    (目的：建立连接状态)</li><li>发送HTTP请求    (目的：发起请求)</li><li>响应HTTP请求    (目的：得到资源)</li><li>TCP挥手    (目的：结束连接状态,此过程和Connection:keep-alive有关，原因详情看下文)</li><li>浏览器解析/渲染资源展现给用户<h3 id="一、域名解析"><a href="#一、域名解析" class="headerlink" title="一、域名解析"></a>一、域名解析</h3>&nbsp;&nbsp;域名解析的目的就是为了拿到目的服务器的IP地址，此过程解析顺序如下：浏览器DNS缓存→操作系统DNS缓存→hosts文件映射→DNS服务器解析。此过程不一定全部执行，只要在某个环节找到IP地址就无需继续进行。</li></ol><ul><li>浏览器检查自身的DNS缓存，如果缓存中有，则拿到IP。以谷歌浏览器为例，可以输入<code>chrome://net-internals/#dns</code>来查看缓存，浏览器的DNS缓存有容量上线。</li><li>操作系统检查自身的DNS缓存以拿到IP，Windows可以在DOS命令中输入<code>ipconfig /displaydns</code>命令来查看系统DNS缓存。</li><li>hosts文件映射，如果文件中定义了该域名IP映射就可以直接拿到，Windows系统中hosts存在于<code>C:\Windows\System32\drivers\etc</code>目录下。</li><li>如果到了第三不也没有找到IP映射关系，浏览器会向本地的DNS服务器发起一个域名解析的请求以得到IP(DNS服务器解析过程这里不作介绍,我的知识盲区)<h3 id="二、TCP三次握手"><a href="#二、TCP三次握手" class="headerlink" title="二、TCP三次握手"></a>二、TCP三次握手</h3><img src="http://upload-images.jianshu.io/upload_images/3985563-ecf824604debcdf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><br>&nbsp;&nbsp;HTTP是建立在TCP/IP协议之上的应用层协议，浏览器拿到域名对应的IP地址后，就会开始向服务器发起连接的请求，TCP连接要经历三次握手(图片来源于百度)：<br><br><img src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2590032753,2466318043&fm=173&app=49&f=JPEG?w=640&h=716&s=E7F239D247AFCCEA106594580300D072"><br><br>第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN-SEND状态，等待服务器确认。<br><br>第二次握手：服务器收到syn包，必须确认客户的SYN(ack=x+1)，同时自己也发送一个SYN包(seq=y)，即SYN+ACK包，此时服务器进入SYN-RECV状态。<br><br>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。<h3 id="三、发送HTTP请求"><a href="#三、发送HTTP请求" class="headerlink" title="三、发送HTTP请求"></a>三、发送HTTP请求</h3>&nbsp;&nbsp;建立好客户端与服务器的TCP连接以后，就开始HTTP的请求了，此过程在前一章已经讨论过了，再次不做赘述，此过程目的就是客户端发起HTTP请求，告诉服务器自己想要什么资源。<h3 id="四、响应HTTP请求"><a href="#四、响应HTTP请求" class="headerlink" title="四、响应HTTP请求"></a>四、响应HTTP请求</h3>&nbsp;&nbsp;此过程详情在上一章也做了介绍，目的就是得到服务器传回的资源文件。<h3 id="五、TCP挥手"><a href="#五、TCP挥手" class="headerlink" title="五、TCP挥手"></a>五、TCP挥手</h3>&nbsp;&nbsp;<strong>此过程稍微有点特殊，并不是所有过程都有此步骤，取决于Connection请求头。在上一章介绍过这个请求头，Connection:keep-alive表示持久连接，也就是说如果客户端在发起HTTP请求时，标明了此头信息，则在服务器响应HTTP完成后，不断开连接，以便于下一次继续传输数据，这也是HTTP1.0所没有的功能。但是并不是有了此头信息就会保持长连接，这也取决于此头信息的配置标准，比如超时时间，连接次数</strong><br><br>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当 然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但此时主动关闭方还可以接受数据。</li></ul><p>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1(与SYN相同，一个FIN占用一个序号)。</p><p>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p><p>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手,连接断开。</p><h3 id="六、浏览器解析-渲染资源"><a href="#六、浏览器解析-渲染资源" class="headerlink" title="六、浏览器解析/渲染资源"></a>六、浏览器解析/渲染资源</h3><p>&nbsp;&nbsp;浏览器拿到服务器传回的资源后(例如:HTML文件)就会开始解析，构建DOM模型，解析CSS文件渲染模型，解释JS等等，渲染出页面(至于浏览器如何解析，这是我的知识盲区，请大佬带带)。</p><h1 id="整个web请求大概流程到此结束，前面已经说到这并包含服务器内部流程。后续慢慢分享服务器内部的执行流程，比如Nginx，web容器，SpringMVC，数据库等等的执行流程。"><a href="#整个web请求大概流程到此结束，前面已经说到这并包含服务器内部流程。后续慢慢分享服务器内部的执行流程，比如Nginx，web容器，SpringMVC，数据库等等的执行流程。" class="headerlink" title="整个web请求大概流程到此结束，前面已经说到这并包含服务器内部流程。后续慢慢分享服务器内部的执行流程，比如Nginx，web容器，SpringMVC，数据库等等的执行流程。"></a>整个web请求大概流程到此结束，前面已经说到这并包含服务器内部流程。后续慢慢分享服务器内部的执行流程，比如Nginx，web容器，SpringMVC，数据库等等的执行流程。</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP执行流程拓展&quot;&gt;&lt;a href=&quot;#HTTP执行流程拓展&quot; class=&quot;headerlink&quot; title=&quot;HTTP执行流程拓展&quot;&gt;&lt;/a&gt;HTTP执行流程拓展&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;本章博客是介绍web请求会话过程中网络执行的情况，不
      
    
    </summary>
    
      <category term="通信" scheme="http://wangzhicto.com/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="HTTP" scheme="http://wangzhicto.com/tags/HTTP/"/>
    
      <category term="通信" scheme="http://wangzhicto.com/tags/%E9%80%9A%E4%BF%A1/"/>
    
      <category term="执行流程" scheme="http://wangzhicto.com/tags/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    
      <category term="TCP/IP" scheme="http://wangzhicto.com/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>走进HTTP协议之报文(下)-浅谈get和post</title>
    <link href="http://wangzhicto.com/2019/05/11/HTTPgetandpost/"/>
    <id>http://wangzhicto.com/2019/05/11/HTTPgetandpost/</id>
    <published>2019-05-11T11:13:13.000Z</published>
    <updated>2019-05-11T11:13:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="走进HTTP协议之报文-下-浅谈get和post"><a href="#走进HTTP协议之报文-下-浅谈get和post" class="headerlink" title="走进HTTP协议之报文(下)-浅谈get和post"></a>走进HTTP协议之报文(下)-浅谈get和post</h1><p>&nbsp;&nbsp;前一章已经初步介绍HTTP报文的主体结构以及常见的各种头信息，但是没有介绍请求行中的一个重要的信息：请求方法。这一章就来说说HTTP请求的几种方法，以及各自的特点，最后附上面试常问的经典面试题get和post。<br></p><h2 id="以HTTP1-1为例，简单介绍8种请求方法。"><a href="#以HTTP1-1为例，简单介绍8种请求方法。" class="headerlink" title="以HTTP1.1为例，简单介绍8种请求方法。"></a>以HTTP1.1为例，简单介绍8种请求方法。</h2><ul><li><font size="4"><strong>GET    获取资源</strong></font><br><br>  &nbsp;&nbsp;<font size="3">GET方法用来请求访问已经被URI识别的资源，请求指定的页面信息，并返回实体主体。如果请求的资是文本类型的资源就原样返回，如果是一段程序，就返回执行结果。</font><br></li><li><font size="4"><strong>POST    传输实体主体</strong></font><br><br>  &nbsp;&nbsp;<font size="3">    向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</font><br></li><li><font size="4"><strong>PUT    传输文件</strong></font><br><br>  &nbsp;&nbsp;<font size="3">    PUT方法用来传输文件。就像FTP的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求URI指定的位置，但是PUT方法存在安全隐患，自身没有权限限制。</font><br></li><li><font size="4"><strong>HEAD    获得报文首部</strong></font><br><br>  &nbsp;&nbsp;<font size="3">    HEAD和GET方法一样，只是不返回报文主体。</font><br></li><li><font size="4"><strong>DELETE    删除文件</strong></font><br><br>  &nbsp;&nbsp;<font size="3">    DELETE方法与PUT方法相反，删除指定资源。</font><br></li><li><font size="4"><strong>OPTIONS    询问支持的方法</strong></font><br><br>  &nbsp;&nbsp;<font size="3">    该方法用来查询针对请求URI指定的资源支持的方法。</font><br></li><li><font size="4"><strong>TRACE    追踪路径</strong></font><br><br>  &nbsp;&nbsp;<font size="3">    回显服务器收到的请求，主要用于测试或诊断。</font><br></li><li><font size="4"><strong>CONNECT    连接代理</strong></font><br><br>  &nbsp;&nbsp;<font size="3">    主要用来在与代理服务器通信时建立隧道，便于SSL和TLS协议把通信内容加密后经隧道传输。</font><br><h1 id="GET和POST方法的区别？"><a href="#GET和POST方法的区别？" class="headerlink" title="GET和POST方法的区别？"></a>GET和POST方法的区别？</h1><h3 id="nbsp-nbsp-最开始接触HTTP的时候，对get和post的认识仅仅停留在浏览器路径问题上，但是后来不断认识，才了解get和post众多不同之处，我把我所了解的不同点罗列一下："><a href="#nbsp-nbsp-最开始接触HTTP的时候，对get和post的认识仅仅停留在浏览器路径问题上，但是后来不断认识，才了解get和post众多不同之处，我把我所了解的不同点罗列一下：" class="headerlink" title="&nbsp;&nbsp;最开始接触HTTP的时候，对get和post的认识仅仅停留在浏览器路径问题上，但是后来不断认识，才了解get和post众多不同之处，我把我所了解的不同点罗列一下："></a>&nbsp;&nbsp;最开始接触HTTP的时候，对get和post的认识仅仅停留在浏览器路径问题上，但是后来不断认识，才了解get和post众多不同之处，我把我所了解的不同点罗列一下：<br></h3><font size="5">1.get方法是URL传参，而post是body体传参，在外观上是最明显的差别。</font><br><br><font size="5">2.get方法传参有大小限制(不同浏览器内核支持不一样,KB级别)，post没有大小限制(受服务器性能和容器版本限制,MB级别)。</font><br><br><font size="5">3.get请求要求传参是ASCII字符，URL编码，post支持更多种编码方式。</font><br><br><font size="5">4.get请求会被浏览器进行缓存和标签，post大多数浏览器不会默认缓存它。</font><br><br><font size="5">5.get请求不存在重复提交问题，post提交会有。</font><br><br><font size="5">6.HTTP设计初衷对两者的目的本身不同。</font><br><br><font size="5">7.get请求只有一次TCP数据包，而post有两次TCP数据包，第一次是将基本头信息和服务器确认，得到响应的100状态码，然后进行第二次数据包发送实体，所以post在效率上不如get</font><br><br><strong>注：虽然post会发送两次数据包，但是在一般网络环境下这并不是太大的影响,仅涉及短暂的流操作，性能消耗甚至可以忽略</strong><h3 id="本章就是我目前对HTTP中这几种方法的认知，如有错误或不足，欢迎讨论，接受批评！"><a href="#本章就是我目前对HTTP中这几种方法的认知，如有错误或不足，欢迎讨论，接受批评！" class="headerlink" title="本章就是我目前对HTTP中这几种方法的认知，如有错误或不足，欢迎讨论，接受批评！"></a>本章就是我目前对HTTP中这几种方法的认知，如有错误或不足，欢迎讨论，接受批评！</h3></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;走进HTTP协议之报文-下-浅谈get和post&quot;&gt;&lt;a href=&quot;#走进HTTP协议之报文-下-浅谈get和post&quot; class=&quot;headerlink&quot; title=&quot;走进HTTP协议之报文(下)-浅谈get和post&quot;&gt;&lt;/a&gt;走进HTTP协议之报文(下
      
    
    </summary>
    
      <category term="通信" scheme="http://wangzhicto.com/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="HTTP" scheme="http://wangzhicto.com/tags/HTTP/"/>
    
      <category term="通信" scheme="http://wangzhicto.com/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>走进HTTP协议之报文(上)</title>
    <link href="http://wangzhicto.com/2019/05/08/HTTP/"/>
    <id>http://wangzhicto.com/2019/05/08/HTTP/</id>
    <published>2019-05-08T15:13:58.607Z</published>
    <updated>2019-05-11T05:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="走进HTTP协议之报文-上"><a href="#走进HTTP协议之报文-上" class="headerlink" title="走进HTTP协议之报文(上)"></a>走进HTTP协议之报文(上)</h1><p><strong>第一个博客还是从HTTP开始吧，原因很简单，我买了一本剖析HTTP的书，也是我第一次完整地看完第一本关于技术的书籍。我相信对于大多数开发者而言，特别是web开发，我们时时刻刻都接触着HTTP，但是对于初级甚至更高级的程序员，不见得对这个熟悉又陌生的协议多精通，当然我也一样，在不断学习。对于刚入行或者外行朋友来说什么是HTTP，解释起来费劲，就一句话:当你在浏览器地址栏里输入了<code>www.baidu.com</code>按下回车那一刻，展现在你面前的这个页面就是通过HTTP协议从服务器带回来的，可以说，大家平时上网浏览/购物等等都是建立在HTTP协议上通信的。就不从头写了，直接上整理的资料!</strong></p><h2 id="HTTP报文结构"><a href="#HTTP报文结构" class="headerlink" title="HTTP报文结构"></a>HTTP报文结构</h2><p>客户端与服务器之间的通信通过底层流处理传输数据，但是如果两者之间只是单纯的发送字节数据，彼此根本不知道对方所描述的信息，两种之间必须通过某种数据格式传输数据，好比人们写信一样，要按照某一种格式写，如果只是在纸上不按规矩随便写上自己的内容，接收方是无法理解你写的东西的。而客户端与服务器之间通信约定的格式就是HTTP协议，HTTP他是一种规范，一种约定的协议，并不是某种新的物理技术。</p><p>对于新同学来说首先上图：我以火狐浏览器为例，打开浏览器按下F12，就可以看到许多条浏览器请求服务器的记录，随便选中一条就可以看到HTTP部分模样了。</p><p><img src="/2019/05/08/HTTP/images/request.png" alt></p><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>HTTP请求和响应的报文结构一致</p><p><img src="/images/http.png" alt></p><ul><li>对于请求来说请求行包含请求服务器的方法,资源URL和HTTP版本信息</li><li>对于响应来说响应行包含请求结果的状态码，消息说明和HTTP版本信息</li><li>请求头包含请求或响应的各种条件和属性，一般分未4钟头部：通用头部，请求头部，响应头部，实体头部<ol><li>通用首部字段：请求报文和响应报文都会使用的各种头部。</li><li>请求首部字段：从客户端向服务器发送请求时使用的各种头部。</li><li>响应首部字段：从服务器向客户端发送响应时使用的各种头部。</li><li>实体首部字段：在请求/响应的实体部分使用的各种头部。<h3 id="注意：当HTTP报文首部出现了两个或以上相同头部字段名时到底是处理第一次出现还是最后一次的头部，各浏览器内部处理逻辑不同。"><a href="#注意：当HTTP报文首部出现了两个或以上相同头部字段名时到底是处理第一次出现还是最后一次的头部，各浏览器内部处理逻辑不同。" class="headerlink" title="注意：当HTTP报文首部出现了两个或以上相同头部字段名时到底是处理第一次出现还是最后一次的头部，各浏览器内部处理逻辑不同。"></a>注意：当HTTP报文首部出现了两个或以上相同头部字段名时到底是处理第一次出现还是最后一次的头部，各浏览器内部处理逻辑不同。</h3><h2 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h2>HTTP首部字段是传递额外重要信息的作用，比如告知对方自己处理的字符集，压缩格式，实体类型等等。<br>我们以HTTP1.1为例(目前使用最为广泛的就是HTTP的1.1版本，各版本之间的区别，在以后会讲到)<h3 id="常见的通用头部字段"><a href="#常见的通用头部字段" class="headerlink" title="常见的通用头部字段"></a>常见的通用头部字段</h3></li></ol></li><li><strong>Connection 连接管理：</strong><br><br>  <code>1.控制代理服务器不再转发该头部 Connection:Upgrade</code><br><br>  <code>2.管理持久连接 Connection:Keep-Alive</code> 表示客户端与服务器的连接是持久连接，这也是HTTP1.0和1.1很大的不同之处。</li><li><strong>Date 创建报文的时间：</strong><br><br>  <code>Date:Tue,01 Jul 1999 09:09:09 GMT 表示通信双方发送报文的时间。</code></li><li><strong>Transfer-Encoding 编码方式：</strong><br><br>  <code>Transfer-Encoding:chunked 表示传输报文主体时采用的编码方式。</code></li><li><strong>Via 路径追踪：(各个代理服务器会在Via信息中添加自己服务器的元信息)</strong><br><br>  <code>Via:1.0 gw.hackr.jp(Squid/3.1),1.1 a1 example.com(Squid/2.7) 表示HTTP报文从客户端到目标服务器经过所有的代理或网关，每经过一个代理服务器，Via的信息就会添加追加一条该服务器的元信息。</code></li><li><strong>Warning 警告：</strong><br><br>  <code>Warning:[警告码][主机:端口]&quot;[警告内容]&quot;([警告时间]) 表示通信之间的各种警告提示信息。</code><h3 id="常见的请求首部字段"><a href="#常见的请求首部字段" class="headerlink" title="常见的请求首部字段"></a>常见的请求首部字段</h3></li><li><strong>Accept 能接受的格式：</strong><br><br>  <code>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</code> 表示客户端告知服务器自己能处理的媒体信息类型，类型之间逗号隔开，q表示权重，不指定权重，默认q=1。</li><li><strong>Accept-Charset 能接受的字符集：</strong><br><br>  <code>Accept:Charset:iso-8859-1,unicode-1-1;q=0.8 表示客户端告知服务器自己能处理的字符集，q表示字符集间的权重优先级，各种字符集之间逗号隔开。</code></li><li><strong>Accept-Encoding 能接受的内容编码：</strong><br><br>  <code>Accept-Encoding:gzip,deflate 表示客户端告知服务器自己处理文件的编码方式，gzip和deflate均是压缩算法格式，q表示权重优先级。</code></li><li><strong>Accept-Language 能接受的语言：</strong><br><br>  <code>Accept-Language:zh-cn,zh;q=0.7;en-us,en;q==0.3 表示客户端告知服务器自己能处理的语言,中文或英文等等。</code></li><li><strong>Authorization 认证信息：</strong><br><br>  <code>Authorization:Basic wllirSOI64Slsdkhsdf635dg== 表示客户端告知服务器用户代理的认证信息，如果服务器要求该认证信息，而客户端没有传入，则会抛出401错误。</code></li><li><strong>Host 请求的目标服务器主机名：</strong><br><br>  <code>Host:www.wangzhicto.com 指明要请求的目标服务器，当某个IP地址下映射了多个域名，转发服务器无法得知客户端要访问哪一个子服务器时，就必须要明确指定时哪一个子服务器。</code></li><li><strong>Range 请求资源范围：</strong><br><br>  <code>Range:bytes=1024-2048 表示客户端告知服务器自己所需要的资源的范围，比如客户端需要username.txt文件的第1024-2048字节内容，服务器就无需全部返回。注：范围单位是字节。</code></li><li><strong>Referer 请求发起来源地址：</strong><br><br>  <code>Referer:http://www.taobao.com/index.html 表示请求的URL是从哪一个页面发起的。</code></li><li><strong>User-Agent 客户端信息：</strong><br><br>  <code>User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36 客户端告知服务器自己的基本信息，比如操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</code><h3 id="常见的响应首部字段"><a href="#常见的响应首部字段" class="headerlink" title="常见的响应首部字段"></a>常见的响应首部字段</h3></li><li><strong>Server 服务器信息：</strong><br><br>  <code>Server:Apache/2.2.0 (Unix) 表示服务器告知客户端当前服务器上的HTTP服务器应用程序基本信息。</code></li><li><strong>Accept-Ranges 范围处理：</strong><br><br>  <code>Accept-Ranges:bytes 告知客户端当前服务器能否处理范围请求，不能处理就返回none</code></li><li><strong>Location 资源重定向：</strong><br><br>  <code>Location:http://www.wangchicto2.com/hello.html 表示服务器告知客户端，被请求的资源在另一个地址，希望客户端按照如下地址进行请求，并且返回的状态码为3开头的三位数，比如302重定向。</code></li><li><strong>Retry-After 服务器维护通知：</strong><br><br>  <code>Retry-After:Tue,01 Jul 1999 09:09:09 GMT 告知客户端服务器维护到某个时刻以后再来访问。</code></li><li><strong>Content-Encoding 内容编码方式：</strong><br><br>  <code>Content-Encoding:gzip</code></li><li><strong>Content-Language 内容语言：</strong><br><br>  <code>Content-Language:zh-CN</code></li><li><strong>Content-Length 内容大小：</strong><br><br>  <code>Content-Length:1024 表示返回的内容大小，单位：字节。</code></li><li><strong>Content-Range 内容范围：</strong><br><br>  <code>Content-Range:1024-2048 表示返回的内容范围。</code></li><li><strong>Content-Type 实体类型：</strong><br><br>  <code>Content-Type:text/html;charset=utf-8 表示返回的内容类型格式。</code><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3></li><li><p><strong>Cookie 客户端信息对象：</strong><br><br>  <code>Cookie:username=wangzhi 表示客户端告知服务器一些私密信息</code></p><h2 id="HTTP常见状态码速查"><a href="#HTTP常见状态码速查" class="headerlink" title="HTTP常见状态码速查"></a>HTTP常见状态码速查</h2><p>HTTP状态码表示服务器返回给客户端的状态，可以大概描述处理的结果情况。HTTP状态码分为5类,分别是1xx,2xx,3xx,4xx,5xx (‘xx’表示数字)<br><br><strong>1xx:1开头的三位数，表示服务器接收后请求正在处理。</strong><br><br><strong>2xx:2开头的三位数，表示服务器正常处理完毕。</strong><br><br><strong>3xx:3开头的三位数，表示该请求需要附加操作才能继续完成。</strong><br><br><strong>4xx:4开头的三位数，表示服务器无法处理该请求。</strong><br><br><strong>5xx:5开头的三位数，表示服务器在处理请求过程中出错。</strong><br></p></li><li><p><strong>200</strong>    表示客户端发起的请求被服务器正常成功处理。</p></li><li><strong>206</strong>    表示客户端发起了范围请求。</li><li><strong>302</strong>    表示该请求的资源被分配到了新的路径上，希望客户端重新按照返回的URL请求。</li><li><strong>304</strong>    表示服务器告知客户端，该资源可以使用你的缓存，不需要重新获取。</li><li><strong>400</strong>    表示请求报文中存在语法格式错误，请客户端检查发请的请求格式是否合法。</li><li><strong>401</strong>    表示服务器需要客户端提供身份认证。</li><li><strong>403</strong>    表示客户端请求的资源不允许访问。</li><li><strong>404</strong>    表示服务器上没有客户端要请求的资源。这个错误很常见，请求的资源不存在。</li><li><strong>500</strong>    表示服务器在处理请求的时候发生了错误，可能是程序BUG引起。</li><li><strong>502</strong>    表示服务器宕机或防火墙问题。</li><li><strong>503</strong>    表示服务器处于超负荷运行或正在停机维护。</li></ul><p>#第一章博客就到此吧，后续分享HTTP(下),包括HTTP的请求方式，HTTPS，HTTP请求全过程的解析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;走进HTTP协议之报文-上&quot;&gt;&lt;a href=&quot;#走进HTTP协议之报文-上&quot; class=&quot;headerlink&quot; title=&quot;走进HTTP协议之报文(上)&quot;&gt;&lt;/a&gt;走进HTTP协议之报文(上)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;第一个博客还是从HTTP开始吧，
      
    
    </summary>
    
      <category term="通信" scheme="http://wangzhicto.com/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="HTTP" scheme="http://wangzhicto.com/tags/HTTP/"/>
    
      <category term="通信" scheme="http://wangzhicto.com/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>千里之行始于足下</title>
    <link href="http://wangzhicto.com/2019/05/07/hello-world/"/>
    <id>http://wangzhicto.com/2019/05/07/hello-world/</id>
    <published>2019-05-07T09:12:56.559Z</published>
    <updated>2019-05-08T04:36:15.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="千里之行始于足下"><a href="#千里之行始于足下" class="headerlink" title="千里之行始于足下"></a>千里之行始于足下</h1><h4 id="今天开始更新技术博客，同行或者将来同行的朋友们可以一起学习。自己搭的私人站点，慢慢的分享与学习java，数据库，各技术源码，web优化，互联网架构，大数据相关的技术点和一些自己搜集的文档-安装包资源。希望大家指出不足或者错误的地方，也希望给刚入行的朋友一些经验指导！不定时更新。"><a href="#今天开始更新技术博客，同行或者将来同行的朋友们可以一起学习。自己搭的私人站点，慢慢的分享与学习java，数据库，各技术源码，web优化，互联网架构，大数据相关的技术点和一些自己搜集的文档-安装包资源。希望大家指出不足或者错误的地方，也希望给刚入行的朋友一些经验指导！不定时更新。" class="headerlink" title="今天开始更新技术博客，同行或者将来同行的朋友们可以一起学习。自己搭的私人站点，慢慢的分享与学习java，数据库，各技术源码，web优化，互联网架构，大数据相关的技术点和一些自己搜集的文档/安装包资源。希望大家指出不足或者错误的地方，也希望给刚入行的朋友一些经验指导！不定时更新。"></a>今天开始更新技术博客，同行或者将来同行的朋友们可以一起学习。自己搭的私人站点，慢慢的分享与学习java，数据库，各技术源码，web优化，互联网架构，大数据相关的技术点和一些自己搜集的文档/安装包资源。希望大家指出不足或者错误的地方，也希望给刚入行的朋友一些经验指导！不定时更新。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;千里之行始于足下&quot;&gt;&lt;a href=&quot;#千里之行始于足下&quot; class=&quot;headerlink&quot; title=&quot;千里之行始于足下&quot;&gt;&lt;/a&gt;千里之行始于足下&lt;/h1&gt;&lt;h4 id=&quot;今天开始更新技术博客，同行或者将来同行的朋友们可以一起学习。自己搭的私人站点，慢慢
      
    
    </summary>
    
      <category term="java" scheme="http://wangzhicto.com/categories/java/"/>
    
    
      <category term="java" scheme="http://wangzhicto.com/tags/java/"/>
    
      <category term="数据库" scheme="http://wangzhicto.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="大数据" scheme="http://wangzhicto.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="源码" scheme="http://wangzhicto.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
