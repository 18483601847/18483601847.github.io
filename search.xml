<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[3年,前进的方向......]]></title>
    <url>%2F2019%2F05%2F21%2Fjava%E5%85%A8%E6%A0%88%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;这两天看了很多前辈大佬的感悟心得，受益匪浅。这里我把前辈们给我们的建议整理一下，也算是自己的学习计划。再CSDN上看到一句很有意思的话:”面试造核弹、入职拧螺丝,到底如何应付面试的核弹制造技术”？那就是只能做一个全面的核弹制造专家”。这里整理了一下java十万八千里取经之路，我们应该具备的技能，一部分采纳自CSDN上的前辈大佬的经验之谈，一部分是自己的学习方向。 开篇第一句话：技术始终要向学历低头第一部分：JAVA关键字作用&nbsp;&nbsp;明白static、final、transient、volatile等等的作用，基本原理，JVM对这些关键字有什么特殊处理？，foreach循环的原理等等。 第二部分：集合(必看不解释)&nbsp;&nbsp;List、Map、Set 各种实现类的底层实现原理，实现类的优缺点。 List集合 ArrayList实现原理，优缺点，源码必看 LinkedList实现原理，优缺点，源码必看 Vector、Stack特点Set集合 HashSet实现原理，源码必看 LinkedHashSet实现原理 TreeSet如何实现有序Map HashMap源码必看，实现原理必须懂，线程安全问题，红黑树 TreeMap如何实现有序 LinkedHashMap基本特征 ConcurrentHashMap必须懂为什么安全，分段锁，迭代器CopyOnWrite 常用并发集合的作用，场景第三部分：线程 Runnable和Callable有何区别？多次start一个线程会怎么样、线程有哪些状态？ synchronized、Lock和ReentrantLock的区别、synchronized锁普通方法和锁静态方法、死锁的原理及排查方法 什么是ThreadLocal？ 常用的线程池有几种？这几种线程池之间有什么区别和联系？ 常用的并发包下的锁第四部分：设计模式 单例模式的几种实现方式 代理模式实现方式有几种？各有什么区别？底层如何实现？必须会 工厂模式特征 装饰者模式如何实现？第五部分：IO流&nbsp;&nbsp;文件IO流会用几种就行，主要是Socket 阻塞/非阻塞的区别、同步/异步的区别 NIO、BIO、AIO的区别 NIO实现原理？多路复用机制？ Netty 第六部分：JVM&nbsp;&nbsp;不研究JVM的java程序员当不了大佬。 垃圾收集机制，常见的垃圾收集器，各有什么特点 常见的垃圾回收算法，各自的特点 类加载机制/双亲委派模型到底是怎么回事？有哪些类加载器？ JVM内存模型 堆、栈、方法区各自的模型，作用 JVM调优 第七部分：框架源码(必看不解释)&nbsp;&nbsp;最近我正在看腾讯课堂里面教的框架源码系列课程，感觉很有用，我们天天在用框架，却不知道框架的底层，实属可悲。 Spring的IOC和AOP如何实现？ Spring如何使用的工厂模式？ Spring如何管理Bean？初始化，销毁能做什么？怎么做？ Spring如何管理事务？事务隔离级别？传播？ SpringMVC执行流程？ MyBatis工作流程？ MyBatis如何实现Mapper接口映射？代理模式如何实现？ SqlSession如何执行的增删改查？一二级缓存 结果集如何封装的对象？ 第八部分：数据库&nbsp;&nbsp;数据库当热不能停留在增删改查阶段，必须清楚更深层次的东西，以MySql为例。 SQL执行流程？执行顺序？ 索引为什么用树结构？ SQL语句优化 Explain如何分析执行计划？ 大数据量的分库分表？一致性问题？读写分离，双机热备？ 事务隔离级别？ MyISAM和InnerDB各自区别？第九部分：第三方中间件/框架/开源项目 Dubbo如何进行封装，如果进行负载均衡的实现？ Zookeeper协调框架有何特点？作用？ 消息队列：rabbitMQ工作模式，应用场景？Kafka工作原理？ 缓存：主要是结合业务有不同实现，redis相关问题，雪崩？持久化？数据淘汰？ 第十部份：数据结构&amp;算法&nbsp;&nbsp;常用的数据结构在集合里面已经有所提现，但是也要知道常见的数据结构和算法。 AVL树、红黑树、栈、队列、散列表 常见的排序算法：冒泡、快排、选择、插入 归并排序在Collection.sort()里如何应用的？ 二分查找算法 递归/迭代第十一部份：web零碎知识点(也挺重要) HTTP相关，请求/响应？HTTPS有何区别？请求方法各自区别? TCP的三次握手四次挥手 Tomcat工作流程？调优 Servlet的核心作用，继承实现结构，生命周期 Cookie、session 分布式下的session问题？Token机制？ 分布式锁如何实现？redis没有锁机制如何实现锁？ java反射 序列化 Atom包相关原子操作 Maven SpringBoot第十二部份：Linux 基本的Linux操作，基本命令，内存/进程管理，vim相关，shell简单脚本 Docker容器技术、K8S第十二部份：大数据相关技术 ES全文检索 Hadoop各阶段执行流程，hive数据仓库的基本操作，HBase工作模型 实时处理Spark]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[资源分享]]></title>
    <url>%2F2019%2F05%2F17%2F%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[平时收集的开发相关的资料，自己搭建的FTP服务器，可随时下载，包括常用的jar包，安装各组件教程，安装包，等等，后续慢慢上传上去浏览器输入ftp://47.100.242.238/即可访问登录名用ftptest密码ftp123456 该用户只有FTP目录的读取权限]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片转Base64编码-java实现]]></title>
    <url>%2F2019%2F05%2F16%2FBase64%2F</url>
    <content type="text"><![CDATA[为什么要将图片Base64转码?&nbsp;&nbsp;在web开发过程中,客户端与服务器通过HTTP协议互相获取数据，如果页面存在大量的图片，而都通过HTTP请求来获取资源，无疑是消耗不必要的性能。我们可以通过对一些比较小的图片或者需要该图片快速渲染处理，我们可以将该图片进行Base64转码，从而减少HTTP请求次数以达到优化目的，蚊子腿也是肉。但并不是将所有的图片都进行转码，过多的Base64也会造成前端CSS渲染压力增大，视不同场景取舍。 如何将图片进行转码?&nbsp;&nbsp;我以java代码为例，照一张本地的图片，也可以是网络上的图片，通过IO流和Apache提供的工具类实现commons-codec-1.9.jar(JDK8中也有对应的转码方式，但是Apache工具类更丰富)。 //String imagePath = “D:/uk.png”; public static String getImageBase64(String imagePath){ FileInputStream is = null; //文件输入流 ByteArrayOutputStream data = null; //字节数组流 try { is = new FileInputStream(imagePath); data = new ByteArrayOutputStream(); int len=-1; byte[] by = new byte[1024]; while((len=is.read(by))!=-1){ //循环读取字节 data.write(by,0,len); //循环写入内存 } } catch (IOException e) { e.printStackTrace(); }finally { try { is.close(); //关闭连接 } catch (IOException e) { e.printStackTrace(); } } return Base64.encodeBase64String(data.toByteArray()); //Base64转码 } 有转码当然也有解码，解码过程其实就是反过来，调用decodeBase64方法即可Base64.decodeBase64(Base64Code);]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[完整的HTTP请求过程]]></title>
    <url>%2F2019%2F05%2F12%2Fhttp%E5%85%A8%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[HTTP执行流程拓展&nbsp;&nbsp;本章博客是介绍web请求会话过程中网络执行的情况，不涉及服务器内部执行流程。话不多说，一起学习吧！&nbsp;&nbsp;第一篇博客中提到当在浏览器的地址栏中输入www.wangzhicto.com按下回车键的那一刻，展现在眼前的页面就是通过HTTP从服务器带回来的，其实这一刻，不仅仅是发送HTTP请求这么简单，先看一下整个过程概览，然后一一详解…… 过程概览 域名解析 (目的：得到服务器IP地址，定位地址) TCP握手 (目的：建立连接状态) 发送HTTP请求 (目的：发起请求) 响应HTTP请求 (目的：得到资源) TCP挥手 (目的：结束连接状态,此过程和Connection:keep-alive有关，原因详情看下文) 浏览器解析/渲染资源展现给用户一、域名解析&nbsp;&nbsp;域名解析的目的就是为了拿到目的服务器的IP地址，此过程解析顺序如下：浏览器DNS缓存→操作系统DNS缓存→hosts文件映射→DNS服务器解析。此过程不一定全部执行，只要在某个环节找到IP地址就无需继续进行。 浏览器检查自身的DNS缓存，如果缓存中有，则拿到IP。以谷歌浏览器为例，可以输入chrome://net-internals/#dns来查看缓存，浏览器的DNS缓存有容量上线。 操作系统检查自身的DNS缓存以拿到IP，Windows可以在DOS命令中输入ipconfig /displaydns命令来查看系统DNS缓存。 hosts文件映射，如果文件中定义了该域名IP映射就可以直接拿到，Windows系统中hosts存在于C:\Windows\System32\drivers\etc目录下。 如果到了第三不也没有找到IP映射关系，浏览器会向本地的DNS服务器发起一个域名解析的请求以得到IP(DNS服务器解析过程这里不作介绍,我的知识盲区)二、TCP三次握手通过对wireshark抓包软件可以看到，建立HTTP连接的确是基于TCP三次握手开始，wireshark抓包的使用，日后给他家分享!&nbsp;&nbsp;HTTP是建立在TCP/IP协议之上的应用层协议，浏览器拿到域名对应的IP地址后，就会开始向服务器发起连接的请求，TCP连接要经历三次握手(图片来源于百度)：第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN-SEND状态，等待服务器确认。第二次握手：服务器收到syn包，必须确认客户的SYN(ack=x+1)，同时自己也发送一个SYN包(seq=y)，即SYN+ACK包，此时服务器进入SYN-RECV状态。第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。三、发送HTTP请求&nbsp;&nbsp;建立好客户端与服务器的TCP连接以后，就开始HTTP的请求了，此过程在前一章已经讨论过了，再次不做赘述，此过程目的就是客户端发起HTTP请求，告诉服务器自己想要什么资源。四、响应HTTP请求&nbsp;&nbsp;此过程详情在上一章也做了介绍，目的就是得到服务器传回的资源文件。五、TCP挥手&nbsp;&nbsp;此过程稍微有点特殊，并不是所有过程都有此步骤，取决于Connection请求头。在上一章介绍过这个请求头，Connection:keep-alive表示持久连接，也就是说如果客户端在发起HTTP请求时，标明了此头信息，则在服务器响应HTTP完成后，不断开连接，以便于下一次继续传输数据，这也是HTTP1.0所没有的功能。但是并不是有了此头信息就会保持长连接，这也取决于此头信息的配置标准，比如超时时间，连接次数第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当 然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但此时主动关闭方还可以接受数据。 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1(与SYN相同，一个FIN占用一个序号)。 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手,连接断开。 六、浏览器解析/渲染资源&nbsp;&nbsp;浏览器拿到服务器传回的资源后(例如:HTML文件)就会开始解析，构建DOM模型，解析CSS文件渲染模型，解释JS等等，渲染出页面(至于浏览器如何解析，这是我的知识盲区，请大佬带带)。 整个web请求大概流程到此结束，前面已经说到这并包含服务器内部流程。后续慢慢分享服务器内部的执行流程，比如Nginx，web容器，SpringMVC，数据库等等的执行流程。]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>通信</tag>
        <tag>执行流程</tag>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[走进HTTP协议之报文(下)-浅谈get和post]]></title>
    <url>%2F2019%2F05%2F11%2FHTTPgetandpost%2F</url>
    <content type="text"><![CDATA[走进HTTP协议之报文(下)-浅谈get和post&nbsp;&nbsp;前一章已经初步介绍HTTP报文的主体结构以及常见的各种头信息，但是没有介绍请求行中的一个重要的信息：请求方法。这一章就来说说HTTP请求的几种方法，以及各自的特点，最后附上面试常问的经典面试题get和post。 以HTTP1.1为例，简单介绍8种请求方法。 GET 获取资源 &nbsp;&nbsp;GET方法用来请求访问已经被URI识别的资源，请求指定的页面信息，并返回实体主体。如果请求的资是文本类型的资源就原样返回，如果是一段程序，就返回执行结果。 POST 传输实体主体 &nbsp;&nbsp; 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 PUT 传输文件 &nbsp;&nbsp; PUT方法用来传输文件。就像FTP的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求URI指定的位置，但是PUT方法存在安全隐患，自身没有权限限制。 HEAD 获得报文首部 &nbsp;&nbsp; HEAD和GET方法一样，只是不返回报文主体。 DELETE 删除文件 &nbsp;&nbsp; DELETE方法与PUT方法相反，删除指定资源。 OPTIONS 询问支持的方法 &nbsp;&nbsp; 该方法用来查询针对请求URI指定的资源支持的方法。 TRACE 追踪路径 &nbsp;&nbsp; 回显服务器收到的请求，主要用于测试或诊断。 CONNECT 连接代理 &nbsp;&nbsp; 主要用来在与代理服务器通信时建立隧道，便于SSL和TLS协议把通信内容加密后经隧道传输。GET和POST方法的区别？&nbsp;&nbsp;最开始接触HTTP的时候，对get和post的认识仅仅停留在浏览器路径问题上，但是后来不断认识，才了解get和post众多不同之处，我把我所了解的不同点罗列一下：1.get方法是URL传参，而post是body体传参，在外观上是最明显的差别。2.get方法传参有大小限制(不同浏览器内核支持不一样,KB级别)，post没有大小限制(受服务器性能和容器版本限制,MB级别)。3.get请求要求传参是ASCII字符，URL编码，post支持更多种编码方式。4.get请求会被浏览器进行缓存和标签，post大多数浏览器不会默认缓存它。5.get请求不存在重复提交问题，post提交会有。6.HTTP设计初衷对两者的目的本身不同。7.get请求只有一次TCP数据包，而post有两次TCP数据包，第一次是将基本头信息和服务器确认，得到响应的100状态码，然后进行第二次数据包发送实体，所以post在效率上不如get注：虽然post会发送两次数据包，但是在一般网络环境下这并不是太大的影响,仅涉及短暂的流操作，性能消耗甚至可以忽略本章就是我目前对HTTP中这几种方法的认知，如有错误或不足，欢迎讨论，接受批评！]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[走进HTTP协议之报文(上)]]></title>
    <url>%2F2019%2F05%2F08%2FHTTP%2F</url>
    <content type="text"><![CDATA[走进HTTP协议之报文(上)第一个博客还是从HTTP开始吧，原因很简单，我买了一本剖析HTTP的书，也是我第一次完整地看完第一本关于技术的书籍。我相信对于大多数开发者而言，特别是web开发，我们时时刻刻都接触着HTTP，但是对于初级甚至更高级的程序员，不见得对这个熟悉又陌生的协议多精通，当然我也一样，在不断学习。对于刚入行或者外行朋友来说什么是HTTP，解释起来费劲，就一句话:当你在浏览器地址栏里输入了www.baidu.com按下回车那一刻，展现在你面前的这个页面就是通过HTTP协议从服务器带回来的，可以说，大家平时上网浏览/购物等等都是建立在HTTP协议上通信的。就不从头写了，直接上整理的资料! HTTP报文结构客户端与服务器之间的通信通过底层流处理传输数据，但是如果两者之间只是单纯的发送字节数据，彼此根本不知道对方所描述的信息，两种之间必须通过某种数据格式传输数据，好比人们写信一样，要按照某一种格式写，如果只是在纸上不按规矩随便写上自己的内容，接收方是无法理解你写的东西的。而客户端与服务器之间通信约定的格式就是HTTP协议，HTTP他是一种规范，一种约定的协议，并不是某种新的物理技术。 对于新同学来说首先上图：我以火狐浏览器为例，打开浏览器按下F12，就可以看到许多条浏览器请求服务器的记录，随便选中一条就可以看到HTTP部分模样了。 HTTP请求HTTP请求和响应的报文结构一致 对于请求来说请求行包含请求服务器的方法,资源URL和HTTP版本信息 对于响应来说响应行包含请求结果的状态码，消息说明和HTTP版本信息 请求头包含请求或响应的各种条件和属性，一般分未4钟头部：通用头部，请求头部，响应头部，实体头部 通用首部字段：请求报文和响应报文都会使用的各种头部。 请求首部字段：从客户端向服务器发送请求时使用的各种头部。 响应首部字段：从服务器向客户端发送响应时使用的各种头部。 实体首部字段：在请求/响应的实体部分使用的各种头部。注意：当HTTP报文首部出现了两个或以上相同头部字段名时到底是处理第一次出现还是最后一次的头部，各浏览器内部处理逻辑不同。HTTP首部HTTP首部字段是传递额外重要信息的作用，比如告知对方自己处理的字符集，压缩格式，实体类型等等。我们以HTTP1.1为例(目前使用最为广泛的就是HTTP的1.1版本，各版本之间的区别，在以后会讲到)常见的通用头部字段 Connection 连接管理： 1.控制代理服务器不再转发该头部 Connection:Upgrade 2.管理持久连接 Connection:Keep-Alive 表示客户端与服务器的连接是持久连接，这也是HTTP1.0和1.1很大的不同之处。 Date 创建报文的时间： Date:Tue,01 Jul 1999 09:09:09 GMT 表示通信双方发送报文的时间。 Transfer-Encoding 编码方式： Transfer-Encoding:chunked 表示传输报文主体时采用的编码方式。 Via 路径追踪：(各个代理服务器会在Via信息中添加自己服务器的元信息) Via:1.0 gw.hackr.jp(Squid/3.1),1.1 a1 example.com(Squid/2.7) 表示HTTP报文从客户端到目标服务器经过所有的代理或网关，每经过一个代理服务器，Via的信息就会添加追加一条该服务器的元信息。 Warning 警告： Warning:[警告码][主机:端口]&quot;[警告内容]&quot;([警告时间]) 表示通信之间的各种警告提示信息。常见的请求首部字段 Accept 能接受的格式： Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 表示客户端告知服务器自己能处理的媒体信息类型，类型之间逗号隔开，q表示权重，不指定权重，默认q=1。 Accept-Charset 能接受的字符集： Accept:Charset:iso-8859-1,unicode-1-1;q=0.8 表示客户端告知服务器自己能处理的字符集，q表示字符集间的权重优先级，各种字符集之间逗号隔开。 Accept-Encoding 能接受的内容编码： Accept-Encoding:gzip,deflate 表示客户端告知服务器自己处理文件的编码方式，gzip和deflate均是压缩算法格式，q表示权重优先级。 Accept-Language 能接受的语言： Accept-Language:zh-cn,zh;q=0.7;en-us,en;q==0.3 表示客户端告知服务器自己能处理的语言,中文或英文等等。 Authorization 认证信息： Authorization:Basic wllirSOI64Slsdkhsdf635dg== 表示客户端告知服务器用户代理的认证信息，如果服务器要求该认证信息，而客户端没有传入，则会抛出401错误。 Host 请求的目标服务器主机名： Host:www.wangzhicto.com 指明要请求的目标服务器，当某个IP地址下映射了多个域名，转发服务器无法得知客户端要访问哪一个子服务器时，就必须要明确指定时哪一个子服务器。 Range 请求资源范围： Range:bytes=1024-2048 表示客户端告知服务器自己所需要的资源的范围，比如客户端需要username.txt文件的第1024-2048字节内容，服务器就无需全部返回。注：范围单位是字节。 Referer 请求发起来源地址： Referer:http://www.taobao.com/index.html 表示请求的URL是从哪一个页面发起的。 User-Agent 客户端信息： User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36 客户端告知服务器自己的基本信息，比如操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。常见的响应首部字段 Server 服务器信息： Server:Apache/2.2.0 (Unix) 表示服务器告知客户端当前服务器上的HTTP服务器应用程序基本信息。 Accept-Ranges 范围处理： Accept-Ranges:bytes 告知客户端当前服务器能否处理范围请求，不能处理就返回none Location 资源重定向： Location:http://www.wangchicto2.com/hello.html 表示服务器告知客户端，被请求的资源在另一个地址，希望客户端按照如下地址进行请求，并且返回的状态码为3开头的三位数，比如302重定向。 Retry-After 服务器维护通知： Retry-After:Tue,01 Jul 1999 09:09:09 GMT 告知客户端服务器维护到某个时刻以后再来访问。 Content-Encoding 内容编码方式： Content-Encoding:gzip Content-Language 内容语言： Content-Language:zh-CN Content-Length 内容大小： Content-Length:1024 表示返回的内容大小，单位：字节。 Content-Range 内容范围： Content-Range:1024-2048 表示返回的内容范围。 Content-Type 实体类型： Content-Type:text/html;charset=utf-8 表示返回的内容类型格式。其他 Cookie 客户端信息对象： Cookie:username=wangzhi 表示客户端告知服务器一些私密信息 HTTP常见状态码速查HTTP状态码表示服务器返回给客户端的状态，可以大概描述处理的结果情况。HTTP状态码分为5类,分别是1xx,2xx,3xx,4xx,5xx (‘xx’表示数字)1xx:1开头的三位数，表示服务器接收后请求正在处理。2xx:2开头的三位数，表示服务器正常处理完毕。3xx:3开头的三位数，表示该请求需要附加操作才能继续完成。4xx:4开头的三位数，表示服务器无法处理该请求。5xx:5开头的三位数，表示服务器在处理请求过程中出错。 200 表示客户端发起的请求被服务器正常成功处理。 206 表示客户端发起了范围请求。 302 表示该请求的资源被分配到了新的路径上，希望客户端重新按照返回的URL请求。 304 表示服务器告知客户端，该资源可以使用你的缓存，不需要重新获取。 400 表示请求报文中存在语法格式错误，请客户端检查发请的请求格式是否合法。 401 表示服务器需要客户端提供身份认证。 403 表示客户端请求的资源不允许访问。 404 表示服务器上没有客户端要请求的资源。这个错误很常见，请求的资源不存在。 500 表示服务器在处理请求的时候发生了错误，可能是程序BUG引起。 502 表示服务器宕机或防火墙问题。 503 表示服务器处于超负荷运行或正在停机维护。 #第一章博客就到此吧，后续分享HTTP(下),包括HTTP的请求方式，HTTPS，HTTP请求全过程的解析。]]></content>
      <categories>
        <category>通信</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[千里之行始于足下]]></title>
    <url>%2F2019%2F05%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[千里之行始于足下今天开始更新技术博客，同行或者将来同行的朋友们可以一起学习。自己搭的私人站点，慢慢的分享与学习java，数据库，各技术源码，web优化，互联网架构，大数据相关的技术点和一些自己搜集的文档/安装包资源。希望大家指出不足或者错误的地方，也希望给刚入行的朋友一些经验指导！不定时更新。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>数据库</tag>
        <tag>大数据</tag>
        <tag>源码</tag>
      </tags>
  </entry>
</search>
